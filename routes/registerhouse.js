require('dotenv').config()
const express = require("express");
const bodyParser = require("body-parser");
const { RegisterHouse, Img} = require("../models/registerhouseschema");
const multer  = require('multer');
const {GridFsStorage} = require('multer-gridfs-storage');
const upload = multer({ dest: 'uploads/' });

const router = express.Router();

router.use(bodyParser.urlencoded({extended:false}))
router.use(bodyParser.json());

// const storage = new GridFsStorage({
//   url: process.env.MONGO_URL,
//   file: (req, file) => {
//     return {
//       filename: file.originalname
//     };
//   }
// });
// const upload = multer({ storage });

router.post('/photos', upload.single('photos', 12), function (req, res, next) {
  // req.files is array of `photos` files
  // req.body will contain the text fields, if there were any
  const {nameOfOwner,houseNumber,street,LGA,state,} = req.body;
  const {houseImg} = req.files;
  console.log(LGA)
  console.log(houseImg)

  // const newHouseRegistration = new HouseRegistration({
  //   nameOfOwner: nameOfOwner,
  //   houseNumber: houseNumber,
  //   street: street,
  //   LGA: LGA,
  //   state: state,
  //   houseImg : houseImg
  // })
  // newHouseRegistration.save((err)=>{
  //   if (err){
  //     console.error(err)
  //   }else{
  //     res.status(200).json("Successfully registerd a house")
  //   }
  // })
  next()
})

module.exports = router;




/* 
Generated by chat-GPT


const mongoose = require('mongoose');
const { Schema } = mongoose;
const Grid = require('gridfs-stream');
const GridFsStorage = require('multer-gridfs-storage');
const multer = require('multer');

// create a new GridFS storage engine
const storage = new GridFsStorage({
  url: 'mongodb://localhost:27017/myapp',
  file: (req, file) => {
    return {
      filename: file.originalname
    };
  }
});

// create a multer instance with the storage engine
const upload = multer({ storage });

// create a schema for the collection that will store the files
const FileSchema = new Schema({
  filename: { type: String, required: true },
  contentType: { type: String, required: true },
  size: { type: Number, required: true },
  uploadDate: { type: Date, required: true },
  metadata: { type: Object }
});

// create a model for the collection
const File = mongoose.model('File', FileSchema);

// create a connection to the database
mongoose.connect('mongodb://localhost:27017/myapp', { useNewUrlParser: true, useUnifiedTopology: true });

// create a gridfs-stream instance
let gfs;

mongoose.connection.once('open', () => {
  // initialize gridfs-stream
  gfs = Grid(mongoose.connection.db, mongoose.mongo);
  gfs.collection('uploads');
});

// export the schema and the upload middleware
module.exports = { File, upload, gfs };


another example

const express = require('express');
const multer = require('multer');
const { MongoClient, ObjectId } = require('mongodb');

const app = express();

// Set up Multer for handling file uploads
const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

// Connect to MongoDB
const mongoClient = new MongoClient('mongodb://localhost:27017/mydb', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

mongoClient.connect((err, client) => {
  if (err) {
    console.error(err);
    return;
  }
  const db = client.db('mydb');

  // Route for uploading files
  app.post('/upload', upload.single('file'), (req, res) => {
    const file = req.file;
    if (!file) {
      res.status(400).send('No file uploaded.');
      return;
    }
    // Insert the file into the database
    const collection = db.collection('files');
    collection.insertOne(
      {
        name: file.originalname,
        type: file.mimetype,
        size: file.size,
        data: file.buffer,
      },
      (err, result) => {
        if (err) {
          console.error(err);
          res.status(500).send('Error uploading file.');
          return;
        }
        res.send('File uploaded successfully.');
      }
    );
  });

  // Route for downloading files
  app.get('/download/:id', (req, res) => {
    const id = req.params.id;
    const collection = db.collection('files');
    // Find the file in the database by ID
    collection.findOne({ _id: ObjectId(id) }, (err, file) => {
      if (err) {
        console.error(err);
        res.status(500).send('Error downloading file.');
        return;
      }
      if (!file) {
        res.status(404).send('File not found.');
        return;
      }
      // Set the content type and send the file data as the response
      res.set('Content-Type', file.type);
      res.send(file.data);
    });
  });

  // Start the server
  app.listen(3000, () => {
    console.log('Server listening on port 3000.');
  });
});


*/
