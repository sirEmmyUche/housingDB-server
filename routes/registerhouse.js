const fs = require('fs');
const express = require("express");
const bodyParser = require("body-parser");
const HouseRegistration = require("./models/registerhouseschema");

const router = express.Router();

router.use(bodyParser.json());

router.post("/registerhouse", (req, res)=>{
    const {nameOfOwner,houseNumber,street,LGA,state, house} = req.body;
    const newHouseRegistration = new HouseRegistration({
        nameOfOwner: nameOfOwner,
        houseNumber:houseNumber,
        street:street,
        LGA:LGA,
        state:state,
        house: {houseType: house, desc: house, img: img }
    })
    newHouseRegistration.save((err)=>{
        if(err){
            console.log(err)} 
        else{
            res.status(200).json("House registration completed")
        }
    })
})



/* 
Generated by chat-GPT


const mongoose = require('mongoose');
const { Schema } = mongoose;
const Grid = require('gridfs-stream');
const GridFsStorage = require('multer-gridfs-storage');
const multer = require('multer');

// create a new GridFS storage engine
const storage = new GridFsStorage({
  url: 'mongodb://localhost:27017/myapp',
  file: (req, file) => {
    return {
      filename: file.originalname
    };
  }
});

// create a multer instance with the storage engine
const upload = multer({ storage });

// create a schema for the collection that will store the files
const FileSchema = new Schema({
  filename: { type: String, required: true },
  contentType: { type: String, required: true },
  size: { type: Number, required: true },
  uploadDate: { type: Date, required: true },
  metadata: { type: Object }
});

// create a model for the collection
const File = mongoose.model('File', FileSchema);

// create a connection to the database
mongoose.connect('mongodb://localhost:27017/myapp', { useNewUrlParser: true, useUnifiedTopology: true });

// create a gridfs-stream instance
let gfs;

mongoose.connection.once('open', () => {
  // initialize gridfs-stream
  gfs = Grid(mongoose.connection.db, mongoose.mongo);
  gfs.collection('uploads');
});

// export the schema and the upload middleware
module.exports = { File, upload, gfs };

*/
